# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Scene(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content_id': 'int',
        'is_show': 'bool',
        'show_group_number': 'int',
        'name': 'str',
        'parent_group_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'Id',
        'content_id': 'ContentId',
        'is_show': 'IsShow',
        'show_group_number': 'ShowGroupNumber',
        'name': 'Name',
        'parent_group_ids': 'ParentGroupIds'
    }

    def __init__(self, id=None, content_id=None, is_show=None, show_group_number=None, name=None, parent_group_ids=None):  # noqa: E501
        """Scene - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content_id = None
        self._is_show = None
        self._show_group_number = None
        self._name = None
        self._parent_group_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if content_id is not None:
            self.content_id = content_id
        if is_show is not None:
            self.is_show = is_show
        if show_group_number is not None:
            self.show_group_number = show_group_number
        if name is not None:
            self.name = name
        if parent_group_ids is not None:
            self.parent_group_ids = parent_group_ids

    @property
    def id(self):
        """Gets the id of this Scene.  # noqa: E501

        Unique id of the scene  # noqa: E501

        :return: The id of this Scene.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scene.

        Unique id of the scene  # noqa: E501

        :param id: The id of this Scene.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def content_id(self):
        """Gets the content_id of this Scene.  # noqa: E501

        content id for the scene  # noqa: E501

        :return: The content_id of this Scene.  # noqa: E501
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this Scene.

        content id for the scene  # noqa: E501

        :param content_id: The content_id of this Scene.  # noqa: E501
        :type: int
        """

        self._content_id = content_id

    @property
    def is_show(self):
        """Gets the is_show of this Scene.  # noqa: E501

        true if the scene represents a trigger for a show (or group of shows)  # noqa: E501

        :return: The is_show of this Scene.  # noqa: E501
        :rtype: bool
        """
        return self._is_show

    @is_show.setter
    def is_show(self, is_show):
        """Sets the is_show of this Scene.

        true if the scene represents a trigger for a show (or group of shows)  # noqa: E501

        :param is_show: The is_show of this Scene.  # noqa: E501
        :type: bool
        """

        self._is_show = is_show

    @property
    def show_group_number(self):
        """Gets the show_group_number of this Scene.  # noqa: E501

        if the scene represents a show trigger, this value indicates which show group is activated by this scene.  # noqa: E501

        :return: The show_group_number of this Scene.  # noqa: E501
        :rtype: int
        """
        return self._show_group_number

    @show_group_number.setter
    def show_group_number(self, show_group_number):
        """Sets the show_group_number of this Scene.

        if the scene represents a show trigger, this value indicates which show group is activated by this scene.  # noqa: E501

        :param show_group_number: The show_group_number of this Scene.  # noqa: E501
        :type: int
        """

        self._show_group_number = show_group_number

    @property
    def name(self):
        """Gets the name of this Scene.  # noqa: E501

        Name of the scene  # noqa: E501

        :return: The name of this Scene.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scene.

        Name of the scene  # noqa: E501

        :param name: The name of this Scene.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_group_ids(self):
        """Gets the parent_group_ids of this Scene.  # noqa: E501

        Ids of parent groups of this scene.  This indicates which groups are valid for which the scene can be active.  # noqa: E501

        :return: The parent_group_ids of this Scene.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_group_ids

    @parent_group_ids.setter
    def parent_group_ids(self, parent_group_ids):
        """Sets the parent_group_ids of this Scene.

        Ids of parent groups of this scene.  This indicates which groups are valid for which the scene can be active.  # noqa: E501

        :param parent_group_ids: The parent_group_ids of this Scene.  # noqa: E501
        :type: list[str]
        """

        self._parent_group_ids = parent_group_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scene, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scene):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
