# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aioketraapi.configuration import Configuration


class PublishBeginAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'notification_type': 'str',
        'time_utc': 'datetime'
    }

    attribute_map = {
        'notification_type': 'notification_type',
        'time_utc': 'time_utc'
    }

    def __init__(self, notification_type=None, time_utc=None, local_vars_configuration=None):  # noqa: E501
        """PublishBeginAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._notification_type = None
        self._time_utc = None
        self.discriminator = None

        self.notification_type = notification_type
        self.time_utc = time_utc

    @property
    def notification_type(self):
        """Gets the notification_type of this PublishBeginAllOf.  # noqa: E501

        type of notification  # noqa: E501

        :return: The notification_type of this PublishBeginAllOf.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this PublishBeginAllOf.

        type of notification  # noqa: E501

        :param notification_type: The notification_type of this PublishBeginAllOf.  # noqa: E501
        :type notification_type: str
        """
        if self.local_vars_configuration.client_side_validation and notification_type is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ButtonChange", "PublishBegin", "HubReady", "GroupStateChange"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and notification_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def time_utc(self):
        """Gets the time_utc of this PublishBeginAllOf.  # noqa: E501

        time of notification  # noqa: E501

        :return: The time_utc of this PublishBeginAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._time_utc

    @time_utc.setter
    def time_utc(self, time_utc):
        """Sets the time_utc of this PublishBeginAllOf.

        time of notification  # noqa: E501

        :param time_utc: The time_utc of this PublishBeginAllOf.  # noqa: E501
        :type time_utc: datetime
        """
        if self.local_vars_configuration.client_side_validation and time_utc is None:  # noqa: E501
            raise ValueError("Invalid value for `time_utc`, must not be `None`")  # noqa: E501

        self._time_utc = time_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishBeginAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublishBeginAllOf):
            return True

        return self.to_dict() != other.to_dict()
