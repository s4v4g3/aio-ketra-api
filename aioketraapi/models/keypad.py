# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aioketraapi.configuration import Configuration


class Keypad(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'is_virtual': 'bool',
        'level': 'int',
        'name': 'str',
        'serial_number': 'str',
        'buttons': 'list[Button]'
    }

    attribute_map = {
        'id': 'Id',
        'is_virtual': 'IsVirtual',
        'level': 'Level',
        'name': 'Name',
        'serial_number': 'SerialNumber',
        'buttons': 'Buttons'
    }

    def __init__(self, id=None, is_virtual=None, level=None, name=None, serial_number=None, buttons=None, local_vars_configuration=None):  # noqa: E501
        """Keypad - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._is_virtual = None
        self._level = None
        self._name = None
        self._serial_number = None
        self._buttons = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_virtual is not None:
            self.is_virtual = is_virtual
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if serial_number is not None:
            self.serial_number = serial_number
        if buttons is not None:
            self.buttons = buttons

    @property
    def id(self):
        """Gets the id of this Keypad.  # noqa: E501

        Unique id of the keypad  # noqa: E501

        :return: The id of this Keypad.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Keypad.

        Unique id of the keypad  # noqa: E501

        :param id: The id of this Keypad.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def is_virtual(self):
        """Gets the is_virtual of this Keypad.  # noqa: E501

        Is the keypad virtual or physical?  # noqa: E501

        :return: The is_virtual of this Keypad.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this Keypad.

        Is the keypad virtual or physical?  # noqa: E501

        :param is_virtual: The is_virtual of this Keypad.  # noqa: E501
        :type is_virtual: bool
        """

        self._is_virtual = is_virtual

    @property
    def level(self):
        """Gets the level of this Keypad.  # noqa: E501

        intensity level of the keypad's slider  # noqa: E501

        :return: The level of this Keypad.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Keypad.

        intensity level of the keypad's slider  # noqa: E501

        :param level: The level of this Keypad.  # noqa: E501
        :type level: int
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this Keypad.  # noqa: E501

        Name of the keypad  # noqa: E501

        :return: The name of this Keypad.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Keypad.

        Name of the keypad  # noqa: E501

        :param name: The name of this Keypad.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this Keypad.  # noqa: E501

        if the keypad is not virtual, specifies the serial number of the keypad  # noqa: E501

        :return: The serial_number of this Keypad.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Keypad.

        if the keypad is not virtual, specifies the serial number of the keypad  # noqa: E501

        :param serial_number: The serial_number of this Keypad.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def buttons(self):
        """Gets the buttons of this Keypad.  # noqa: E501


        :return: The buttons of this Keypad.  # noqa: E501
        :rtype: list[Button]
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this Keypad.


        :param buttons: The buttons of this Keypad.  # noqa: E501
        :type buttons: list[Button]
        """

        self._buttons = buttons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Keypad):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Keypad):
            return True

        return self.to_dict() != other.to_dict()
