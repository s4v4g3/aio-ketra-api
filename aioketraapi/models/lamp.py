# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Lamp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'channel': 'int',
        'parent_group_ids': 'list[str]',
        'serial_number': 'str',
        'number_of_subchannels': 'int',
        'logical_address': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'channel': 'Channel',
        'parent_group_ids': 'ParentGroupIds',
        'serial_number': 'SerialNumber',
        'number_of_subchannels': 'NumberOfSubchannels',
        'logical_address': 'LogicalAddress'
    }

    def __init__(self, id=None, name=None, channel=None, parent_group_ids=None, serial_number=None, number_of_subchannels=None, logical_address=None):  # noqa: E501
        """Lamp - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._channel = None
        self._parent_group_ids = None
        self._serial_number = None
        self._number_of_subchannels = None
        self._logical_address = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if channel is not None:
            self.channel = channel
        if parent_group_ids is not None:
            self.parent_group_ids = parent_group_ids
        if serial_number is not None:
            self.serial_number = serial_number
        if number_of_subchannels is not None:
            self.number_of_subchannels = number_of_subchannels
        if logical_address is not None:
            self.logical_address = logical_address

    @property
    def id(self):
        """Gets the id of this Lamp.  # noqa: E501

        Unique id of the lamp  # noqa: E501

        :return: The id of this Lamp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lamp.

        Unique id of the lamp  # noqa: E501

        :param id: The id of this Lamp.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Lamp.  # noqa: E501

        Name of the lamp  # noqa: E501

        :return: The name of this Lamp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lamp.

        Name of the lamp  # noqa: E501

        :param name: The name of this Lamp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def channel(self):
        """Gets the channel of this Lamp.  # noqa: E501


        :return: The channel of this Lamp.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Lamp.


        :param channel: The channel of this Lamp.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def parent_group_ids(self):
        """Gets the parent_group_ids of this Lamp.  # noqa: E501

        Ids of parent groups of this lamp  # noqa: E501

        :return: The parent_group_ids of this Lamp.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_group_ids

    @parent_group_ids.setter
    def parent_group_ids(self, parent_group_ids):
        """Sets the parent_group_ids of this Lamp.

        Ids of parent groups of this lamp  # noqa: E501

        :param parent_group_ids: The parent_group_ids of this Lamp.  # noqa: E501
        :type: list[str]
        """

        self._parent_group_ids = parent_group_ids

    @property
    def serial_number(self):
        """Gets the serial_number of this Lamp.  # noqa: E501

        serial number of the lamp  # noqa: E501

        :return: The serial_number of this Lamp.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Lamp.

        serial number of the lamp  # noqa: E501

        :param serial_number: The serial_number of this Lamp.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def number_of_subchannels(self):
        """Gets the number_of_subchannels of this Lamp.  # noqa: E501


        :return: The number_of_subchannels of this Lamp.  # noqa: E501
        :rtype: int
        """
        return self._number_of_subchannels

    @number_of_subchannels.setter
    def number_of_subchannels(self, number_of_subchannels):
        """Sets the number_of_subchannels of this Lamp.


        :param number_of_subchannels: The number_of_subchannels of this Lamp.  # noqa: E501
        :type: int
        """

        self._number_of_subchannels = number_of_subchannels

    @property
    def logical_address(self):
        """Gets the logical_address of this Lamp.  # noqa: E501


        :return: The logical_address of this Lamp.  # noqa: E501
        :rtype: int
        """
        return self._logical_address

    @logical_address.setter
    def logical_address(self, logical_address):
        """Sets the logical_address of this Lamp.


        :param logical_address: The logical_address of this Lamp.  # noqa: E501
        :type: int
        """

        self._logical_address = logical_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lamp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lamp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
