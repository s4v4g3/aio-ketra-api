# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from aioketraapi.models.lamp_state_parameters import LampStateParameters  # noqa: F401,E501

class LampState(LampStateParameters):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transition_time': 'int',
        'updated_at': 'str',
        'transition_complete': 'bool',
        'active_shows': 'list[int]',
        'start_state': 'LampStateParameters'
    }
    if hasattr(LampStateParameters, "swagger_types"):
        swagger_types.update(LampStateParameters.swagger_types)

    attribute_map = {
        'transition_time': 'TransitionTime',
        'updated_at': 'UpdatedAt',
        'transition_complete': 'TransitionComplete',
        'active_shows': 'ActiveShows',
        'start_state': 'StartState'
    }
    if hasattr(LampStateParameters, "attribute_map"):
        attribute_map.update(LampStateParameters.attribute_map)

    def __init__(self, transition_time=None, updated_at=None, transition_complete=None, active_shows=None, start_state=None, *args, **kwargs):  # noqa: E501
        """LampState - a model defined in Swagger"""  # noqa: E501
        self._transition_time = None
        self._updated_at = None
        self._transition_complete = None
        self._active_shows = None
        self._start_state = None
        self.discriminator = None
        if transition_time is not None:
            self.transition_time = transition_time
        if updated_at is not None:
            self.updated_at = updated_at
        if transition_complete is not None:
            self.transition_complete = transition_complete
        if active_shows is not None:
            self.active_shows = active_shows
        if start_state is not None:
            self.start_state = start_state
        LampStateParameters.__init__(self, *args, **kwargs)

    @property
    def transition_time(self):
        """Gets the transition_time of this LampState.  # noqa: E501

        transition time, in ms.  (Required)  # noqa: E501

        :return: The transition_time of this LampState.  # noqa: E501
        :rtype: int
        """
        return self._transition_time

    @transition_time.setter
    def transition_time(self, transition_time):
        """Sets the transition_time of this LampState.

        transition time, in ms.  (Required)  # noqa: E501

        :param transition_time: The transition_time of this LampState.  # noqa: E501
        :type: int
        """

        self._transition_time = transition_time

    @property
    def updated_at(self):
        """Gets the updated_at of this LampState.  # noqa: E501

        the time at which the group was last updated.  New for API schema 4.  # noqa: E501

        :return: The updated_at of this LampState.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LampState.

        the time at which the group was last updated.  New for API schema 4.  # noqa: E501

        :param updated_at: The updated_at of this LampState.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def transition_complete(self):
        """Gets the transition_complete of this LampState.  # noqa: E501

        returns true if the lamp is finished transitioning to the last updated color.  New for API schema 4.  # noqa: E501

        :return: The transition_complete of this LampState.  # noqa: E501
        :rtype: bool
        """
        return self._transition_complete

    @transition_complete.setter
    def transition_complete(self, transition_complete):
        """Sets the transition_complete of this LampState.

        returns true if the lamp is finished transitioning to the last updated color.  New for API schema 4.  # noqa: E501

        :param transition_complete: The transition_complete of this LampState.  # noqa: E501
        :type: bool
        """

        self._transition_complete = transition_complete

    @property
    def active_shows(self):
        """Gets the active_shows of this LampState.  # noqa: E501

        indicates the show groups that are currently active for the group.  New for API schema 4.  # noqa: E501

        :return: The active_shows of this LampState.  # noqa: E501
        :rtype: list[int]
        """
        return self._active_shows

    @active_shows.setter
    def active_shows(self, active_shows):
        """Sets the active_shows of this LampState.

        indicates the show groups that are currently active for the group.  New for API schema 4.  # noqa: E501

        :param active_shows: The active_shows of this LampState.  # noqa: E501
        :type: list[int]
        """

        self._active_shows = active_shows

    @property
    def start_state(self):
        """Gets the start_state of this LampState.  # noqa: E501


        :return: The start_state of this LampState.  # noqa: E501
        :rtype: LampStateParameters
        """
        return self._start_state

    @start_state.setter
    def start_state(self, start_state):
        """Sets the start_state of this LampState.


        :param start_state: The start_state of this LampState.  # noqa: E501
        :type: LampStateParameters
        """

        self._start_state = start_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LampState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LampState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
