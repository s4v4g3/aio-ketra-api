# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aioketraapi.configuration import Configuration


class Button(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'id': 'str',
        'level': 'int',
        'name': 'str',
        'position': 'int',
        'is_power_button': 'bool',
        'scene_is_modified': 'bool'
    }

    attribute_map = {
        'active': 'Active',
        'id': 'Id',
        'level': 'Level',
        'name': 'Name',
        'position': 'Position',
        'is_power_button': 'IsPowerButton',
        'scene_is_modified': 'SceneIsModified'
    }

    def __init__(self, active=None, id=None, level=None, name=None, position=None, is_power_button=None, scene_is_modified=None, local_vars_configuration=None):  # noqa: E501
        """Button - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._id = None
        self._level = None
        self._name = None
        self._position = None
        self._is_power_button = None
        self._scene_is_modified = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if position is not None:
            self.position = position
        if is_power_button is not None:
            self.is_power_button = is_power_button
        if scene_is_modified is not None:
            self.scene_is_modified = scene_is_modified

    @property
    def active(self):
        """Gets the active of this Button.  # noqa: E501

        is the button active?  # noqa: E501

        :return: The active of this Button.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Button.

        is the button active?  # noqa: E501

        :param active: The active of this Button.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def id(self):
        """Gets the id of this Button.  # noqa: E501

        Id of the button  # noqa: E501

        :return: The id of this Button.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Button.

        Id of the button  # noqa: E501

        :param id: The id of this Button.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this Button.  # noqa: E501

        intensity level of the button's scene or show  # noqa: E501

        :return: The level of this Button.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Button.

        intensity level of the button's scene or show  # noqa: E501

        :param level: The level of this Button.  # noqa: E501
        :type level: int
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this Button.  # noqa: E501

        Name of the button  # noqa: E501

        :return: The name of this Button.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Button.

        Name of the button  # noqa: E501

        :param name: The name of this Button.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this Button.  # noqa: E501

        Zero-based position of the button on the keypad  # noqa: E501

        :return: The position of this Button.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Button.

        Zero-based position of the button on the keypad  # noqa: E501

        :param position: The position of this Button.  # noqa: E501
        :type position: int
        """

        self._position = position

    @property
    def is_power_button(self):
        """Gets the is_power_button of this Button.  # noqa: E501

        is this button a power button?  (added in firmware version 1.12)  # noqa: E501

        :return: The is_power_button of this Button.  # noqa: E501
        :rtype: bool
        """
        return self._is_power_button

    @is_power_button.setter
    def is_power_button(self, is_power_button):
        """Sets the is_power_button of this Button.

        is this button a power button?  (added in firmware version 1.12)  # noqa: E501

        :param is_power_button: The is_power_button of this Button.  # noqa: E501
        :type is_power_button: bool
        """

        self._is_power_button = is_power_button

    @property
    def scene_is_modified(self):
        """Gets the scene_is_modified of this Button.  # noqa: E501

        is the scene modified by a child keypad?   (added in firmware version 1.12)  # noqa: E501

        :return: The scene_is_modified of this Button.  # noqa: E501
        :rtype: bool
        """
        return self._scene_is_modified

    @scene_is_modified.setter
    def scene_is_modified(self, scene_is_modified):
        """Sets the scene_is_modified of this Button.

        is the scene modified by a child keypad?   (added in firmware version 1.12)  # noqa: E501

        :param scene_is_modified: The scene_is_modified of this Button.  # noqa: E501
        :type scene_is_modified: bool
        """

        self._scene_is_modified = scene_is_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Button):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Button):
            return True

        return self.to_dict() != other.to_dict()
