# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aioketraapi.api_client import ApiClient


class KeypadOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_button_post(self, body, keypad_name, button_name, **kwargs):  # noqa: E501
        """Activate a button  # noqa: E501

        Activates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_button_post(body, keypad_name, button_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_name: Specifies a keypad name (required)
        :param str button_name: Specifies a button name (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_button_post_with_http_info(body, keypad_name, button_name, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_button_post_with_http_info(body, keypad_name, button_name, **kwargs)  # noqa: E501
            return data

    def activate_button_post_with_http_info(self, body, keypad_name, button_name, **kwargs):  # noqa: E501
        """Activate a button  # noqa: E501

        Activates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_button_post_with_http_info(body, keypad_name, button_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_name: Specifies a keypad name (required)
        :param str button_name: Specifies a button name (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'keypad_name', 'button_name', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_button_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate_button_post`")  # noqa: E501
        # verify the required parameter 'keypad_name' is set
        if ('keypad_name' not in params or
                params['keypad_name'] is None):
            raise ValueError("Missing the required parameter `keypad_name` when calling `activate_button_post`")  # noqa: E501
        # verify the required parameter 'button_name' is set
        if ('button_name' not in params or
                params['button_name'] is None):
            raise ValueError("Missing the required parameter `button_name` when calling `activate_button_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'keypad_name' in params:
            query_params.append(('KeypadName', params['keypad_name']))  # noqa: E501
        if 'button_name' in params:
            query_params.append(('ButtonName', params['button_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ActivateButton', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_button_post(self, body, keypad_name, button_name, **kwargs):  # noqa: E501
        """Deactivate a button  # noqa: E501

        Deactivates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_button_post(body, keypad_name, button_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_name: Specifies a keypad name (required)
        :param str button_name: Specifies a button name (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_button_post_with_http_info(body, keypad_name, button_name, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_button_post_with_http_info(body, keypad_name, button_name, **kwargs)  # noqa: E501
            return data

    def deactivate_button_post_with_http_info(self, body, keypad_name, button_name, **kwargs):  # noqa: E501
        """Deactivate a button  # noqa: E501

        Deactivates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_button_post_with_http_info(body, keypad_name, button_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_name: Specifies a keypad name (required)
        :param str button_name: Specifies a button name (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'keypad_name', 'button_name', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_button_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deactivate_button_post`")  # noqa: E501
        # verify the required parameter 'keypad_name' is set
        if ('keypad_name' not in params or
                params['keypad_name'] is None):
            raise ValueError("Missing the required parameter `keypad_name` when calling `deactivate_button_post`")  # noqa: E501
        # verify the required parameter 'button_name' is set
        if ('button_name' not in params or
                params['button_name'] is None):
            raise ValueError("Missing the required parameter `button_name` when calling `deactivate_button_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'keypad_name' in params:
            query_params.append(('KeypadName', params['keypad_name']))  # noqa: E501
        if 'button_name' in params:
            query_params.append(('ButtonName', params['button_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/DeactivateButton', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_get(self, **kwargs):  # noqa: E501
        """Get keypads  # noqa: E501

        Gets the list of Ketra keypads.  By default, unless the includeall parameter is provided and set to true, cascaded and mirrored keypads are not returned in the list. However, the buttons of cascaded keypads are returned with their respective master keypad.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str name: If specified, returns only the keypads matching the name provided
        :param bool includeall: if true, cascaded and mirrored keypads will be returned in the list.  If false or the parameter is not provided, cascaded keypad buttons will be returned as children of their master keypad.
        :param bool nobuttons: if true, the buttons array will not be populated and only the keypad objects will be returned.  For an installation with a large number of keypads this can be much quicker than returning the full set of keypads along with all buttons.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.keypads_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def keypads_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get keypads  # noqa: E501

        Gets the list of Ketra keypads.  By default, unless the includeall parameter is provided and set to true, cascaded and mirrored keypads are not returned in the list. However, the buttons of cascaded keypads are returned with their respective master keypad.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str name: If specified, returns only the keypads matching the name provided
        :param bool includeall: if true, cascaded and mirrored keypads will be returned in the list.  If false or the parameter is not provided, cascaded keypad buttons will be returned as children of their master keypad.
        :param bool nobuttons: if true, the buttons array will not be populated and only the keypad objects will be returned.  For an installation with a large number of keypads this can be much quicker than returning the full set of keypads along with all buttons.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['basicauthuser', 'basicauthpassword', 'name', 'includeall', 'nobuttons']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'includeall' in params:
            query_params.append(('includeall', params['includeall']))  # noqa: E501
        if 'nobuttons' in params:
            query_params.append(('nobuttons', params['nobuttons']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_buttons_button_id_activate_post(self, body, keypad_id, button_id, **kwargs):  # noqa: E501
        """Activate a button  # noqa: E501

        Activates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_activate_post(body, keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_buttons_button_id_activate_post_with_http_info(body, keypad_id, button_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_buttons_button_id_activate_post_with_http_info(body, keypad_id, button_id, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_buttons_button_id_activate_post_with_http_info(self, body, keypad_id, button_id, **kwargs):  # noqa: E501
        """Activate a button  # noqa: E501

        Activates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_activate_post_with_http_info(body, keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'keypad_id', 'button_id', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_buttons_button_id_activate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `keypads_keypad_id_buttons_button_id_activate_post`")  # noqa: E501
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_buttons_button_id_activate_post`")  # noqa: E501
        # verify the required parameter 'button_id' is set
        if ('button_id' not in params or
                params['button_id'] is None):
            raise ValueError("Missing the required parameter `button_id` when calling `keypads_keypad_id_buttons_button_id_activate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501
        if 'button_id' in params:
            path_params['button-id'] = params['button_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}/Buttons/{button-id}/Activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_buttons_button_id_deactivate_post(self, body, keypad_id, button_id, **kwargs):  # noqa: E501
        """Deactivate a button  # noqa: E501

        Deactivates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_deactivate_post(body, keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_buttons_button_id_deactivate_post_with_http_info(body, keypad_id, button_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_buttons_button_id_deactivate_post_with_http_info(body, keypad_id, button_id, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_buttons_button_id_deactivate_post_with_http_info(self, body, keypad_id, button_id, **kwargs):  # noqa: E501
        """Deactivate a button  # noqa: E501

        Deactivates the scene or show represented by the button   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_deactivate_post_with_http_info(body, keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Level body: The level (required)
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'keypad_id', 'button_id', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_buttons_button_id_deactivate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `keypads_keypad_id_buttons_button_id_deactivate_post`")  # noqa: E501
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_buttons_button_id_deactivate_post`")  # noqa: E501
        # verify the required parameter 'button_id' is set
        if ('button_id' not in params or
                params['button_id'] is None):
            raise ValueError("Missing the required parameter `button_id` when calling `keypads_keypad_id_buttons_button_id_deactivate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501
        if 'button_id' in params:
            path_params['button-id'] = params['button_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}/Buttons/{button-id}/Deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_buttons_button_id_get(self, keypad_id, button_id, **kwargs):  # noqa: E501
        """Gets the specified button for a specified keypad  # noqa: E501

        Gets the button specified by {button-id} for the keypad specified by {keypad-id}.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_get(keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_buttons_button_id__with_http_info(keypad_id, button_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_buttons_button_id_get_with_http_info(keypad_id, button_id, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_buttons_button_id_get_with_http_info(self, keypad_id, button_id, **kwargs):  # noqa: E501
        """Gets the specified button for a specified keypad  # noqa: E501

        Gets the button specified by {button-id} for the keypad specified by {keypad-id}.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_get_with_http_info(keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keypad_id', 'button_id', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_buttons_button_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_buttons_button_id_get`")  # noqa: E501
        # verify the required parameter 'button_id' is set
        if ('button_id' not in params or
                params['button_id'] is None):
            raise ValueError("Missing the required parameter `button_id` when calling `keypads_keypad_id_buttons_button_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501
        if 'button_id' in params:
            path_params['button-id'] = params['button_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}/Buttons/{button-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_buttons_button_id_push_button_post(self, keypad_id, button_id, **kwargs):  # noqa: E501
        """Pushes a button  # noqa: E501

        Performs the same action as a physical press of the button.  The action performed is determined by the current state of the button and the type of keypad.   Added in hub firmware version 1.12 (API schema 2).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_push_button_post(keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str idempotency_key: optional string to guarantee this action will execute only once on the server.  Set this to a random string  and future requests with the same string will be ignored
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_buttons_button_id_push_button_post_with_http_info(keypad_id, button_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_buttons_button_id_push_button_post_with_http_info(keypad_id, button_id, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_buttons_button_id_push_button_post_with_http_info(self, keypad_id, button_id, **kwargs):  # noqa: E501
        """Pushes a button  # noqa: E501

        Performs the same action as a physical press of the button.  The action performed is determined by the current state of the button and the type of keypad.   Added in hub firmware version 1.12 (API schema 2).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_button_id_push_button_post_with_http_info(keypad_id, button_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str button_id: The button's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str idempotency_key: optional string to guarantee this action will execute only once on the server.  Set this to a random string  and future requests with the same string will be ignored
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keypad_id', 'button_id', 'basicauthuser', 'basicauthpassword', 'idempotency_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_buttons_button_id_push_button_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_buttons_button_id_push_button_post`")  # noqa: E501
        # verify the required parameter 'button_id' is set
        if ('button_id' not in params or
                params['button_id'] is None):
            raise ValueError("Missing the required parameter `button_id` when calling `keypads_keypad_id_buttons_button_id_push_button_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501
        if 'button_id' in params:
            path_params['button-id'] = params['button_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'idempotency_key' in params:
            query_params.append(('idempotency_key', params['idempotency_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}/Buttons/{button-id}/PushButton', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_buttons_get(self, keypad_id, **kwargs):  # noqa: E501
        """Gets the buttons for a keypad  # noqa: E501

        Gets the buttons for the keypad specified by {keypad-id}.  If a keypad name is specified instead of a uuid, the buttons for the first keypad matching the specified name will be returned   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_get(keypad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str name: If specified, returns only the buttons matching the name provided
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_buttons_get_with_http_info(keypad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_buttons_get_with_http_info(keypad_id, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_buttons_get_with_http_info(self, keypad_id, **kwargs):  # noqa: E501
        """Gets the buttons for a keypad  # noqa: E501

        Gets the buttons for the keypad specified by {keypad-id}.  If a keypad name is specified instead of a uuid, the buttons for the first keypad matching the specified name will be returned   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_buttons_get_with_http_info(keypad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str name: If specified, returns only the buttons matching the name provided
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keypad_id', 'basicauthuser', 'basicauthpassword', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_buttons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_buttons_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}/Buttons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_get(self, keypad_id, **kwargs):  # noqa: E501
        """Gets a single keypad  # noqa: E501

        Gets a Ketra keypad speficied by {keypad-id}.  If a keypad name is specified instead of a uuid, the first keypad matching the specified name will be returned   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_get(keypad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_get_with_http_info(keypad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_get_with_http_info(keypad_id, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_get_with_http_info(self, keypad_id, **kwargs):  # noqa: E501
        """Gets a single keypad  # noqa: E501

        Gets a Ketra keypad speficied by {keypad-id}.  If a keypad name is specified instead of a uuid, the first keypad matching the specified name will be returned   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_get_with_http_info(keypad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keypad_id', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keypads_keypad_id_set_level_post(self, keypad_id, level, **kwargs):  # noqa: E501
        """sets the master intensity level for a single keypad  # noqa: E501

        Sets the keypad's intensity (brightness) slider to the level specified by the level parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_set_level_post(keypad_id, level, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param bool level: The level (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keypads_keypad_id_set_level_post_with_http_info(keypad_id, level, **kwargs)  # noqa: E501
        else:
            (data) = self.keypads_keypad_id_set_level_post_with_http_info(keypad_id, level, **kwargs)  # noqa: E501
            return data

    def keypads_keypad_id_set_level_post_with_http_info(self, keypad_id, level, **kwargs):  # noqa: E501
        """sets the master intensity level for a single keypad  # noqa: E501

        Sets the keypad's intensity (brightness) slider to the level specified by the level parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keypads_keypad_id_set_level_post_with_http_info(keypad_id, level, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_id: The keypad's name or unique identifier (uuid) (required)
        :param bool level: The level (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keypad_id', 'level', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keypads_keypad_id_set_level_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keypad_id' is set
        if ('keypad_id' not in params or
                params['keypad_id'] is None):
            raise ValueError("Missing the required parameter `keypad_id` when calling `keypads_keypad_id_set_level_post`")  # noqa: E501
        # verify the required parameter 'level' is set
        if ('level' not in params or
                params['level'] is None):
            raise ValueError("Missing the required parameter `level` when calling `keypads_keypad_id_set_level_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypad_id' in params:
            path_params['keypad-id'] = params['keypad_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'level' in params:
            query_params.append(('Level', params['level']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Keypads/{keypad-id}/SetLevel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def push_button_post(self, keypad_name, button_name, **kwargs):  # noqa: E501
        """Deactivate a button  # noqa: E501

        Performs the same action as a physical press of the button.  The action performed is determined by the current state of the button and the type of keypad.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.push_button_post(keypad_name, button_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_name: Specifies a keypad name (required)
        :param str button_name: Specifies a button name (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str idempotency_key: optional string to guarantee this action will execute only once on the server.  Set this to a random string  and future requests with the same string will be ignored
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.push_button_post_with_http_info(keypad_name, button_name, **kwargs)  # noqa: E501
        else:
            (data) = self.push_button_post_with_http_info(keypad_name, button_name, **kwargs)  # noqa: E501
            return data

    def push_button_post_with_http_info(self, keypad_name, button_name, **kwargs):  # noqa: E501
        """Deactivate a button  # noqa: E501

        Performs the same action as a physical press of the button.  The action performed is determined by the current state of the button and the type of keypad.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.push_button_post_with_http_info(keypad_name, button_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str keypad_name: Specifies a keypad name (required)
        :param str button_name: Specifies a button name (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :param str idempotency_key: optional string to guarantee this action will execute only once on the server.  Set this to a random string  and future requests with the same string will be ignored
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keypad_name', 'button_name', 'basicauthuser', 'basicauthpassword', 'idempotency_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method push_button_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keypad_name' is set
        if ('keypad_name' not in params or
                params['keypad_name'] is None):
            raise ValueError("Missing the required parameter `keypad_name` when calling `push_button_post`")  # noqa: E501
        # verify the required parameter 'button_name' is set
        if ('button_name' not in params or
                params['button_name'] is None):
            raise ValueError("Missing the required parameter `button_name` when calling `push_button_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501
        if 'keypad_name' in params:
            query_params.append(('KeypadName', params['keypad_name']))  # noqa: E501
        if 'button_name' in params:
            query_params.append(('ButtonName', params['button_name']))  # noqa: E501
        if 'idempotency_key' in params:
            query_params.append(('idempotency_key', params['idempotency_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/PushButton', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def root_get(self, **kwargs):  # noqa: E501
        """Get keypads and groups  (and scenes in API schema 4 or later)  # noqa: E501

        Gets all keypads and groups in the installation.  Added in hub firmware version 1.14 (API schema 3).   Scenes are also returned in API schema 4.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.root_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.root_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def root_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get keypads and groups  (and scenes in API schema 4 or later)  # noqa: E501

        Gets all keypads and groups in the installation.  Added in hub firmware version 1.14 (API schema 3).   Scenes are also returned in API schema 4.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method root_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
