# coding: utf-8

"""
    Ketra Lighting API

    Control your Ketra lights  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aioketraapi.api_client import ApiClient


class LampOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def lamps_get(self, **kwargs):  # noqa: E501
        """Gets lamps in the installation  # noqa: E501

        placeholder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lamps_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lamps_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.lamps_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def lamps_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets lamps in the installation  # noqa: E501

        placeholder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lamps_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lamps_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lamps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lamps_lamp_id_get(self, lamp_id, **kwargs):  # noqa: E501
        """Gets a lamp by its id  # noqa: E501

        placeholder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lamps_lamp_id_get(lamp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lamp_id: The lamp's unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lamps_lamp_id_get_with_http_info(lamp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lamps_lamp_id_get_with_http_info(lamp_id, **kwargs)  # noqa: E501
            return data

    def lamps_lamp_id_get_with_http_info(self, lamp_id, **kwargs):  # noqa: E501
        """Gets a lamp by its id  # noqa: E501

        placeholder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lamps_lamp_id_get_with_http_info(lamp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lamp_id: The lamp's unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lamp_id', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lamps_lamp_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lamp_id' is set
        if ('lamp_id' not in params or
                params['lamp_id'] is None):
            raise ValueError("Missing the required parameter `lamp_id` when calling `lamps_lamp_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lamp_id' in params:
            path_params['lamp-id'] = params['lamp_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lamps/{lamp-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lamps_lamp_id_state_put(self, body, lamp_id, **kwargs):  # noqa: E501
        """sets a lamp state  # noqa: E501

        sets a lamp state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lamps_lamp_id_state_put(body, lamp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LampState body: Color settings to apply to the lamp (required)
        :param str lamp_id: The lamp's unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lamps_lamp_id_state_put_with_http_info(body, lamp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lamps_lamp_id_state_put_with_http_info(body, lamp_id, **kwargs)  # noqa: E501
            return data

    def lamps_lamp_id_state_put_with_http_info(self, body, lamp_id, **kwargs):  # noqa: E501
        """sets a lamp state  # noqa: E501

        sets a lamp state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lamps_lamp_id_state_put_with_http_info(body, lamp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LampState body: Color settings to apply to the lamp (required)
        :param str lamp_id: The lamp's unique identifier (uuid) (required)
        :param str basicauthuser: Username to use in place of username in basic authentication header.  For a secure installation, this value is ignored but still must be supplied unless a basic authentication header is sent with the request.
        :param str basicauthpassword: Password to use in place of password in basic authentication header. For a secure installation, this should be an oauth token for a user with access to the installation.  If a basic authentication header is sent, this parameter is ignored.  If no basic authentication header is sent, this parameter as well as the basicauthuser parameter must be supplied if the hub is a member of a secure installation.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'lamp_id', 'basicauthuser', 'basicauthpassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lamps_lamp_id_state_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lamps_lamp_id_state_put`")  # noqa: E501
        # verify the required parameter 'lamp_id' is set
        if ('lamp_id' not in params or
                params['lamp_id'] is None):
            raise ValueError("Missing the required parameter `lamp_id` when calling `lamps_lamp_id_state_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lamp_id' in params:
            path_params['lamp-id'] = params['lamp_id']  # noqa: E501

        query_params = []
        if 'basicauthuser' in params:
            query_params.append(('basicauthuser', params['basicauthuser']))  # noqa: E501
        if 'basicauthpassword' in params:
            query_params.append(('basicauthpassword', params['basicauthpassword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lamps/{lamp-id}/state', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
